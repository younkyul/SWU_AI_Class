## 2. 선형 회귀 예제

from sklearn.datasets import load_diabetes
import matplotlib.pyplot as plt
dataset = load_diabetes()
print(dataset.data[0:3])
print(dataset.target[0:3])

x = dataset.data[:, 2]
#print(x)
y = dataset.target
w = 1.0
b = 1.0
y_hat = x[0] * w + b
print(y_hat) 
print(y[0])

w_inc = w + 0.1
y_hat_inc = x[0] * w_inc + b
print(y_hat_inc)

for x_i, y_i in zip(x, y):
    y_hat = x_i * w + b
    err = y_i - y_hat
    w_grad = x_i * err
    b_grad = 1 * err  
    w = w + w_grad
    b = b + b_grad
print(w, b)

plt.scatter(x, y)
print(w, b)
plt.plot([-0.1, 0.2], [-0.1*w+b, 0.2*w+b])
plt.xlabel('x')
plt.ylabel('y')
plt.show()

for i in range(1, 100):
    for x_i, y_i in zip(x, y):
        y_hat = x_i * w + b
        err = y_i - y_hat
        w_grad = x_i * err
        b_grad = 1 * err  
        w = w + w_grad
        b = b + b_grad
print(w, b)

plt.scatter(x, y)
print(w, b)
plt.plot([-0.1, 0.2], [-0.1*w+b, 0.2*w+b])
plt.xlabel('x')
plt.ylabel('y')
plt.show()

x_new = 0.18
y_pred = x_new * w + b
print(y_pred)

plt.scatter(x, y)
plt.scatter(x_new, y_pred)
plt.xlabel('x')
plt.ylabel('y')
plt.show()

## 3. 뉴런 생성

class Neuron:
    
    def __init__(self):
        self.w = 1.0     # 가중치를 초기화합니다
        self.b = 1.0     # 절편을 초기화합니다
    
    def forpass(self, x):
        y_hat = x * self.w + self.b       # 직선 방정식을 계산합니다
        return y_hat
    
    def backprop(self, x, err):
        w_grad = x * err    # 가중치에 대한 그래디언트를 계산합니다
        b_grad = 1 * err    # 절편에 대한 그래디언트를 계산합니다
        return w_grad, b_grad

    def train(self, x, y, epochs=100):
        for i in range(epochs):           # 에포크만큼 반복합니다
            for x_i, y_i in zip(x, y):    # 모든 샘플에 대해 반복합니다
                y_hat = self.forpass(x_i) # 정방향 계산
                err = -(y_i - y_hat)      # 오차 계산
                w_grad, b_grad = self.backprop(x_i, err)  # 역방향 계산
                self.w -= w_grad          # 가중치 업데이트
                self.b -= b_grad          # 절편 업데이트

model = Neuron()
model.train(x, y)

plt.scatter(x, y)
plt.plot([-0.1, 0.15], [-0.1 * model.w + model.b, 0.15 * model.w + model.b])
plt.xlabel('x')
plt.ylabel('y')
plt.show()

x_new = 0.18
y_pred = x_new * model.w + model.b
print(y_pred)
