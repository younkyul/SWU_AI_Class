## 이진 분류

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
dataset = load_breast_cancer()
x = dataset.data
y = dataset.target
print(x.shape, y.shape)

dataset.feature_names[[3,13,23]]
np.unique(dataset.target, return_counts=True)

x_train, x_test, y_train, y_test = train_test_split(x, y, stratify=y, test_size=0.2, random_state=42)
print(x_train.shape, x_test.shape)
np.unique(y_train, return_counts=True)
print(x.shape[1])

class LogisticRegression:
    
    def __init__(self):
        self.w = None
        self.b = None
        self.losses = []

    def forpass(self, x):
        z = np.sum(x * self.w) + self.b  # 직선 방정식을 계산합니다
        return z

    def backprop(self, x, err):
        w_grad = x * err    # 가중치에 대한 그래디언트를 계산합니다
        b_grad = 1 * err    # 절편에 대한 그래디언트를 계산합니다
        return w_grad, b_grad

    def activation(self, z):
        z = np.clip(z, -100, None) # 안전한 np.exp() 계산을 위해
        a = 1 / (1 + np.exp(-z))  # 시그모이드 계산
        return a
        
    def train(self, x, y, epochs=100):
        self.w = np.ones(x.shape[1])      # 가중치를 초기화합니다.
        self.b = 0                        # 절편을 초기화합니다.
        for i in range(epochs):           # epochs만큼 반복합니다
            loss = 0           
            #indexes = np.random.permutation(np.arange(len(x))) # 인덱스를 섞습니다
            indexes = np.arange(len(x)) 

            for i in indexes:                      # 모든 샘플에 대해 반복합니다
                z = self.forpass(x[i])             # 정방향 계산
                a = self.activation(z)             # 활성화 함수 적용
                err = -(y[i] - a)                  # 오차 계산
                w_grad, b_grad = self.backprop(x[i], err) # 역방향 계산
                self.w -= w_grad                   # 가중치 업데이트
                self.b -= b_grad                   # 절편 업데이트
                # 안전한 로그 계산을 위해 클리핑한 후 손실을 누적합니다
                #a = np.clip(a, 1e-10, 1-1e-10)
                #loss += -(y[i]*np.log(a)+(1-y[i])*np.log(1-a))

            # 에포크마다 평균 손실을 저장합니다
            #self.losses.append(loss/len(y))

    
    def predict(self, x):
        z = [self.forpass(x_i) for x_i in x]    # 정방향 계산
        a = self.activation(np.array(z))        # 활성화 함수 적용
        return a > 0.5



model = LogisticRegression()
model.train(x_train, y_train)
np.mean(model.predict(x_test) == y_test)

plt.plot(model.losses)
plt.xlabel('epoch')
plt.ylabel('loss')
plt.show()

## Keras - SGDClassifier 사용

from keras.models import Sequential
from keras.layers import Activation, Dense
from keras.optimizers import SGD

model = Sequential()
model.add(Dense(1, input_shape = (30,), activation = 'sigmoid'))
#model.add(Dense(30, input_shape = (30,), activation = 'sigmoid'))
#model.add(Dense(30, activation = 'sigmoid'))
#model.add(Dense(1, activation = 'sigmoid'))
sgd = SGD(lr = 0.01)    # stochastic gradient descent optimizer

model.compile(optimizer = sgd, loss = 'binary_crossentropy', metrics = ['acc']) 
hist = model.fit(x_train, y_train, batch_size = 50, epochs = 500, verbose = 0)

plt.plot(hist.history['loss'])
plt.xlabel('epoch')
plt.ylabel('loss')
plt.show()


results = model.evaluate(x_test, y_test)
print("test loss", results)
